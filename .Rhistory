#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Check out the column names
names(myDF)
#Rename a column
colnames(myDF)[5]<-'SPECIES'
#Rename all columns
names(myDF)
names(myDF)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(myDF)
summary(myDF)
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
boxplot(data=myDF, x=SPECIES,y=PTL_LENGTH)
boxplot(data=myDF, x='SPECIES',y='PTL_LENGTH')
boxplot(data=myDF, x=myDF$SPECIES,y=myDF$PTL_LENGTH)
boxplot(x=myDF$SPECIES,y=myDF$PTL_LENGTH)
boxplot(y=myDF$PTL_LENGTH,x=myDF$SPECIES,)
boxplot(y=myDF$PTL_LENGTH,x=myDF$SPECIES)
boxplot(x=iris$Species,y=iris$Petal.Length)
boxplot(iris$Petal.Length~iris$Species)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES,col = myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES,fill = myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES,col = myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES, xlab='Species',ylab='Petal Length (in)')
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
?rstan
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
help.start()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE,error = FALSE,message = FALSE, warning = FALSE)
#Subset just some columns
myDF[1:5,5,1]
#Subset just some columns
myDF[c(1:5),c(5,1)]
#Filter based on column values
myDF[,SPECIES == 'setosa']
#Filter based on column values
myDF[,myDF$SPECIES == 'setosa']
#Filter based on column values
myDF[myDF$SPECIES == 'setosa',]
#Filter based on column values
myDF[myDF$SPECIES == 'setosa',c(1:5)]
#Filter based on column values
setosa<-myDF[myDF$SPECIES == 'setosa',] #The logical operator '==' is used to declare equivalency
head(setosa)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the df
dim(myDF)
#Check out the structure and attributes
str(myDF)
#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Subset just some columns and rows
myDF[c(1:5),c(5,1)]
#Filter based on column values
setosa<-myDF[myDF$SPECIES == 'setosa',] #The logical operator '==' is used to declare equivalency
dim(setosa)
head(setosa)
#Check out the column names
names(myDF)
#Rename a column
colnames(myDF)[5]<-'SPECIES'
#Rename all columns
names(myDF)
names(myDF)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(myDF)
#Filter based on column values
setosa<-myDF[myDF$SPECIES == 'setosa',] #The logical operator '==' is used to declare equivalency
dim(setosa)
head(setosa)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the df
dim(myDF)
#Check out the structure and attributes
str(myDF)
#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Checkout the unique values in the 'Species' column
unique(myDF$Species)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the df
dim(myDF)
#Check out the structure and attributes
str(myDF)
#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Checkout the unique values in the 'Species' column
unique(myDF$Species)
#Check out how many of each
table(myDF$Species)
#Subset just some columns and rows [rows index, columns index]
myDF[c(1:5),c(5,1)]
#Filter based on column values
setosa<-myDF[myDF$Species == 'setosa',] #The logical operator '==' is used to declare equivalency
dim(setosa)
head(setosa)
#Check out the column names
names(myDF)
#Rename a column
colnames(myDF)[5]<-'SPECIES'
#Rename all columns
names(myDF)
names(myDF)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(myDF)
histogram(myDF$PTL_LENGTH)
hist(myDF$PTL_LENGTH)
hist(myDF$PTL_LENGTH,bins = 30)
hist(myDF$PTL_LENGTH,bins = 10)
hist(myDF$PTL_LENGTH,bins = 25)
hist(myDF$PTL_LENGTH,bins = 50)
?bins
?hist
?iris
?hist
hist(myDF$PTL_LENGTH,breaks = 10)
hist(myDF$PTL_LENGTH,breaks = 20)
hist(myDF$PTL_LENGTH)
qqnorm(myDF$PTL_LENGTH)
qqnorm(myDF$PTL_LENGTH,col=myDF$SPECIES)
hist(myDF$PTL_LENGTH,col=myDF$SPECIES)
hist(myDF$PTL_LENGTH)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES, xlab='Species',ylab='Petal Length (in)')
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
cars<-cars
head(cars,10)
cars<-cars
head(cars,10)
cars
cars<-mtcars
head(cars,10)
names(cars)
carsMPG<-cars[,c(1,6)]
head(carsMPG)
plot(carsMPG$mpg~carsMPG$wt)
names(cars)
?mtcars
table(cars$gear,cars$mpg)
table(cars$gear,mean(cars$mpg))
table(mean(cars$gear),mean(cars$mpg))
table(cars$gear,cars$cyl)
#Make linear model with lm() and assign it to an object
mdl<-lm(myDF$SP_LENGTH~myDF$SP_WIDTH)
summary(mdl)
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
abline(mdl)
#Make linear model with lm() and assign it to an object
mdl<-lm(myDF$SP_LENGTH~myDF$SP_WIDTH)
summary(mdl)
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
abline(mdl)
summary(mdl)
mdl<-lm(carsMPG$mpg~carsMPG$wt)
summary(mdl)
plot(carsMPG$mpg~carsMPG$wt)
abline(mdl)
mdl<-lm(carsMPG$mpg~carsMPG$wt)
summary(mdl)
plot(carsMPG$mpg~carsMPG$wt)
abline(mdl)
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
data(mtcars)
data(mtcars)
df<-dplyr::filter(mtcars,cyl==8)
df$Car<-rownames(df)
table(df$Car,df$cyl)
View(mtcars)
View(df)
df<-dplyr::filter(mtcars,cyl==8)
df$Car<-row.names(df)
table(df$Car,df$cyl)
row.names(df)
data(mtcars)
row.names(mtcars)
mtcars$Car<-row.names(mtcars)
df<-dplyr::filter(mtcars,cyl==8)
table(df$Car,df$cyl)
table(df$Car,df$am)
?mtcars
setwd("C:/R_Projects/LearnR")
rmarkdown::render_site()
rmarkdown::render_site()
https://medium.com/bbc-visual-and-data-journalism/how-the-bbc-visual-and-data-journalism-team-works-with-graphics-in-r-ed0b35693535
# load package and data
options(scipen=999)  # turn-off scientific notation like 1e+48
library(ggplot2)
theme_set(theme_bw())  # pre-set the bw theme.
data("midwest", package = "ggplot2")
# midwest <- read.csv("http://goo.gl/G1K41K")  # bkup data source
# Scatterplot
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
plot(gg)
# Source: https://github.com/dgrtwo/gganimate
# install.packages("cowplot")  # a gganimate dependency
# devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
install.packages("gganimate")
# Source: https://github.com/dgrtwo/gganimate
# install.packages("cowplot")  # a gganimate dependency
# devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
install.packages("gapminder")
# Source: https://github.com/dgrtwo/gganimate
# install.packages("cowplot")  # a gganimate dependency
# devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
install.packages("ggExtra")
# load package and data
library(ggplot2)
library(ggExtra)
data(mpg, package="ggplot2")
# mpg <- read.csv("http://goo.gl/uEeRGu")
# Scatterplot
theme_set(theme_bw())  # pre-set the bw theme.
mpg_select <- mpg[mpg$hwy >= 35 & mpg$cty > 27, ]
g <- ggplot(mpg, aes(cty, hwy)) +
geom_count() +
geom_smooth(method="lm", se=F)
ggMarginal(g, type = "histogram", fill="transparent")
ggMarginal(g, type = "boxplot", fill="transparent")
# ggMarginal(g, type = "density", fill="transparent")
library(ggplot2)
library(scales)
theme_set(theme_classic())
# prep data
df <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/gdppercap.csv")
colnames(df) <- c("continent", "1952", "1957")
left_label <- paste(df$continent, round(df$`1952`),sep=", ")
right_label <- paste(df$continent, round(df$`1957`),sep=", ")
df$class <- ifelse((df$`1957` - df$`1952`) < 0, "red", "green")
# Plot
p <- ggplot(df) + geom_segment(aes(x=1, xend=2, y=`1952`, yend=`1957`, col=class), size=.75, show.legend=F) +
geom_vline(xintercept=1, linetype="dashed", size=.1) +
geom_vline(xintercept=2, linetype="dashed", size=.1) +
scale_color_manual(labels = c("Up", "Down"),
values = c("green"="#00ba38", "red"="#f8766d")) +  # color of lines
labs(x="", y="Mean GdpPerCap") +  # Axis labels
xlim(.5, 2.5) + ylim(0,(1.1*(max(df$`1952`, df$`1957`))))  # X and Y axis limits
# Add texts
p <- p + geom_text(label=left_label, y=df$`1952`, x=rep(1, NROW(df)), hjust=1.1, size=3.5)
p <- p + geom_text(label=right_label, y=df$`1957`, x=rep(2, NROW(df)), hjust=-0.1, size=3.5)
p <- p + geom_text(label="Time 1", x=1, y=1.1*(max(df$`1952`, df$`1957`)), hjust=1.2, size=5)  # title
p <- p + geom_text(label="Time 2", x=2, y=1.1*(max(df$`1952`, df$`1957`)), hjust=-0.1, size=5)  # title
# Minify theme
p + theme(panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
panel.border = element_blank(),
plot.margin = unit(c(1,2,1,2), "cm"))
library(ggplot2)
library(scales)
theme_set(theme_classic())
# prep data
df <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/gdppercap.csv")
colnames(df) <- c("continent", "1952", "1957")
left_label <- paste(df$continent, round(df$`1952`),sep=", ")
right_label <- paste(df$continent, round(df$`1957`),sep=", ")
df$class <- ifelse((df$`1957` - df$`1952`) < 0, "red", "green")
# Plot
p <- ggplot(df) + geom_segment(aes(x=1, xend=2, y=`1952`, yend=`1957`, col=class), size=.75, show.legend=F) +
geom_vline(xintercept=1, linetype="dashed", size=.1) +
geom_vline(xintercept=2, linetype="dashed", size=.1) +
scale_color_manual(labels = c("Up", "Down"),
values = c("green"="#00ba38", "red"="#f8766d")) +  # color of lines
labs(x="", y="Mean GdpPerCap") +  # Axis labels
xlim(.5, 2.5) + ylim(0,(1.1*(max(df$`1952`, df$`1957`))))  # X and Y axis limits
# Add texts
p <- p + geom_text(label=left_label, y=df$`1952`, x=rep(1, NROW(df)), hjust=1.1, size=3.5)
p <- p + geom_text(label=right_label, y=df$`1957`, x=rep(2, NROW(df)), hjust=-0.1, size=3.5)
p <- p + geom_text(label="Time 1", x=1, y=1.1*(max(df$`1952`, df$`1957`)), hjust=1.2, size=5)  # title
p <- p + geom_text(label="Time 2", x=2, y=1.1*(max(df$`1952`, df$`1957`)), hjust=-0.1, size=5)  # title
# Minify theme
p + theme(panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
panel.border = element_blank(),
plot.margin = unit(c(1,2,1,2), "cm"))
# devtools::install_github("hrbrmstr/ggalt")
library(ggplot2)
library(ggalt)
devtools::install_github("hrbrmstr/ggalt")
#devtools::install_github("hrbrmstr/ggalt")
library(ggplot2)
library(ggalt)
install.packages("dplyr")
install.packages("dplyr")
devtools::install_github("hrbrmstr/ggalt")
devtools::install_github("hrbrmstr/ggalt")
library(ggplot2)
library(ggalt)
theme_set(theme_classic())
health <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/health.csv")
health$Area <- factor(health$Area, levels=as.character(health$Area))  # for right ordering of the dumbells
# health$Area <- factor(health$Area)
gg <- ggplot(health, aes(x=pct_2013, xend=pct_2014, y=Area, group=Area)) +
geom_dumbbell(color="#a3c4dc",
size=0.75,
point.colour.l="#0e668b") +
scale_x_continuous(label=percent) +
labs(x=NULL,
y=NULL,
title="Dumbbell Chart",
subtitle="Pct Change: 2013 vs 2014",
caption="Source: https://github.com/hrbrmstr/ggalt") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
#devtools::install_github("hrbrmstr/ggalt")
library(ggplot2)
library(ggalt)
theme_set(theme_classic())
health <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/health.csv")
health$Area <- factor(health$Area, levels=as.character(health$Area))  # for right ordering of the dumbells
# health$Area <- factor(health$Area)
gg <- ggplot(health, aes(x=pct_2013, xend=pct_2014, y=Area, group=Area)) +
geom_dumbbell(color="#a3c4dc",
size=0.75,
point.colour.l="#0e668b") +
scale_x_continuous(label=percent) +
labs(x=NULL,
y=NULL,
title="Dumbbell Chart",
subtitle="Pct Change: 2013 vs 2014",
caption="Source: https://github.com/hrbrmstr/ggalt") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
View(health)
#devtools::install_github("hrbrmstr/ggalt")
library(ggplot2)
library(ggalt)
library(scales)
theme_set(theme_classic())
health <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/health.csv")
health$Area <- factor(health$Area, levels=as.character(health$Area))  # for right ordering of the dumbells
# health$Area <- factor(health$Area)
gg <- ggplot(health, aes(x=pct_2013, xend=pct_2014, y=Area, group=Area)) +
geom_dumbbell(color="#a3c4dc",
size=0.75,
point.colour.l="#0e668b") +
scale_x_continuous(label=percent) +
labs(x=NULL,
y=NULL,
title="Dumbbell Chart",
subtitle="Pct Change: 2013 vs 2014",
caption="Source: https://github.com/hrbrmstr/ggalt") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
plot(gg)
#devtools::install_github("hrbrmstr/ggalt")
library(ggplot2)
library(ggalt)
library(scales)
theme_set(theme_classic())
health <- read.csv("https://raw.githubusercontent.com/selva86/datasets/master/health.csv")
health$Area <- factor(health$Area, levels=as.character(health$Area))  # for right ordering of the dumbells
# health$Area <- factor(health$Area)
gg <- ggplot(health, aes(x=pct_2013, xend=pct_2014, y=Area, group=Area)) +
geom_dumbbell(color="#a3c4dc",
size=0.75,
colour_x = "darkred",
colour_xend = "darkBlue"
) +
scale_x_continuous(label=percent) +
labs(x=NULL,
y=NULL,
title="Dumbbell Chart",
subtitle="Pct Change: 2013 vs 2014",
caption="Source: https://github.com/hrbrmstr/ggalt") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
plot(gg)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
