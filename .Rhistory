#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE,error = FALSE,message = FALSE, warning = FALSE)
#Make a vector into memory
myVec<-c(1,2,3,4,5,6,7,8)
myVec
#Check its class
class(myVec)
#Check its other attributes
str(myVecN)
#Make a vector into memory
myVecN<-c(1,2,3,4,5,6,7,8)
myVecN
#Check its class
class(myVecN)
#Check its other attributes
str(myVecN)
myVecL<-c('one','two','three','four','five','six')
class(myVecL)
str(myVecL)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Make a vector into memory
myVecN<-c(1,2,3,4,5,6,7,8)
myVecN
#Check its class
class(myVecN)
#Check its other attributes
str(myVecN)
myVecL<-c('one','two','three','four','five','six')
class(myVecL)
str(myVecL)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Make a vector into memory
myVecN<-c(1,2,3,4,5,6,7,8)
myVecN
#Check its class
class(myVecN)
#Check its other attributes
str(myVecN)
myVecL<-c('one','two','three','four','five','six')
class(myVecL)
str(myVecL)
#Make a vector into memory
myVecN<-c(1,2,3,4,5,6,7,8)
myVecN
#Check its class
class(myVecN)
#Check its other attributes
str(myVecN)
myVecL<-c('one','two','three','four','five','six')
class(myVecL)
str(myVecL)
#Make a vector into memory
myVecN<-c(1,2,3,4,5,6,7,8)
myVecN
#Check its class
class(myVecN)
#Check its other attributes
str(myVecN)
myVecL<-c('one','two','three','four','five','six')
class(myVecL)
str(myVecL)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
v1<-c(2,4,6,8,10)
v2<-c(1,1,2,2,0.5)
v1*v2
v1/v2
df<-iris
#Check out the df
View(df)
#Load the iris data set
df<-iris
#Load the iris data set
df<-iris
#Check out the df
dim(df)
str(df)
View(df)
#Check out the df
dim(df)
#Rename a column
colnames(df)[5]<-'SPECIES'
#Rename all columns
names(df)
names(df)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
#Rename all columns
names(df)
#Load the iris data set
df<-iris
#Check out the df
dim(df)
str(df)
View(df)
#Rename a column
colnames(df)[5]<-'SPECIES'
#Rename all columns
names(df)
names(df)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(df)
#Load the iris data set
df<-iris
#Check out the df
dim(df)
str(df)
#Rename a column
colnames(df)[5]<-'SPECIES'
#Rename all columns
names(df)
names(df)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(df)
#Remove the objects with rm()
rm(myVec,myVecL)
#Remove the objects with rm()
rm(myVecN,myVecL)
names(diamonds)
data(diamonds)
datasets()
list(datasets)
data()
faithful<-faithful
head(faithful)
dim(faithful)
plot(faithful$eruptions~faithful$waiting)
summary(faithful)
faithful<-faithful
head(faithful)
dim(faithful)
summary(faithful)
plot(faithful$eruptions~faithful$waiting)
xxx<-summary(faithful)
xxx
xxx<-as.data.frame(summary(faithful))
xxx
View(xxx)
xxx<-as.data.frame(t(summary(faithful)))
xxx
View(xxx)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
faithful<-faithful
head(faithful)
dim(faithful)
str(faithful)
summary(faithful)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
dim(faithful);str(faithful)
dim(faithful)
str(faithful)
summary(faithful)
summary(faithful)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
help(faithful)
library(help='faithful')
#Load the iris data set
df<-iris
#Check out the documentation for the data set
help(df)
#Check out the df
dim(df)
#Check out the structure and attributes
str(df)
#Check out the first 10 records
head(df,10)
#Check out the last 5 records
tail(df,5)
#Check out the column names
names(df)
#Rename a column
colnames(df)[5]<-'SPECIES'
#Rename all columns
names(df)
names(df)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(df)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the documentation for the data set
help(myDF)
#Check out the documentation for the data set
help(iris)
plot(myDF$Sepal.Length~myDF$Sepal.Width)
plot(myDF$Sepal.Length~myDF$Sepal.Width, col = 'Species')
plot(myDF$Sepal.Length~myDF$Sepal.Width, col = myDF$Species)
summary(myDF)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the documentation for the iris data set
help(iris)
#Check out the df
dim(myDF)
#Check out the structure and attributes
str(myDF)
#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Check out the column names
names(myDF)
#Rename a column
colnames(myDF)[5]<-'SPECIES'
#Rename all columns
names(myDF)
names(myDF)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(myDF)
summary(myDF)
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
boxplot(data=myDF, x=SPECIES,y=PTL_LENGTH)
boxplot(data=myDF, x='SPECIES',y='PTL_LENGTH')
boxplot(data=myDF, x=myDF$SPECIES,y=myDF$PTL_LENGTH)
boxplot(x=myDF$SPECIES,y=myDF$PTL_LENGTH)
boxplot(y=myDF$PTL_LENGTH,x=myDF$SPECIES,)
boxplot(y=myDF$PTL_LENGTH,x=myDF$SPECIES)
boxplot(x=iris$Species,y=iris$Petal.Length)
boxplot(iris$Petal.Length~iris$Species)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES,col = myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES,fill = myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES,col = myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES, xlab='Species',ylab='Petal Length (in)')
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
?rstan
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
help.start()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE,error = FALSE,message = FALSE, warning = FALSE)
#Subset just some columns
myDF[1:5,5,1]
#Subset just some columns
myDF[c(1:5),c(5,1)]
#Filter based on column values
myDF[,SPECIES == 'setosa']
#Filter based on column values
myDF[,myDF$SPECIES == 'setosa']
#Filter based on column values
myDF[myDF$SPECIES == 'setosa',]
#Filter based on column values
myDF[myDF$SPECIES == 'setosa',c(1:5)]
#Filter based on column values
setosa<-myDF[myDF$SPECIES == 'setosa',] #The logical operator '==' is used to declare equivalency
head(setosa)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the df
dim(myDF)
#Check out the structure and attributes
str(myDF)
#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Subset just some columns and rows
myDF[c(1:5),c(5,1)]
#Filter based on column values
setosa<-myDF[myDF$SPECIES == 'setosa',] #The logical operator '==' is used to declare equivalency
dim(setosa)
head(setosa)
#Check out the column names
names(myDF)
#Rename a column
colnames(myDF)[5]<-'SPECIES'
#Rename all columns
names(myDF)
names(myDF)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(myDF)
#Filter based on column values
setosa<-myDF[myDF$SPECIES == 'setosa',] #The logical operator '==' is used to declare equivalency
dim(setosa)
head(setosa)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the df
dim(myDF)
#Check out the structure and attributes
str(myDF)
#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Checkout the unique values in the 'Species' column
unique(myDF$Species)
#Load the iris data set to an object called myDF
myDF<-iris
#Check out the df
dim(myDF)
#Check out the structure and attributes
str(myDF)
#Check out the first 10 records
head(myDF,10)
#Check out the last 5 records
tail(myDF,5)
#Checkout the unique values in the 'Species' column
unique(myDF$Species)
#Check out how many of each
table(myDF$Species)
#Subset just some columns and rows [rows index, columns index]
myDF[c(1:5),c(5,1)]
#Filter based on column values
setosa<-myDF[myDF$Species == 'setosa',] #The logical operator '==' is used to declare equivalency
dim(setosa)
head(setosa)
#Check out the column names
names(myDF)
#Rename a column
colnames(myDF)[5]<-'SPECIES'
#Rename all columns
names(myDF)
names(myDF)<-c('SP_LENGTH','SP_WIDTH','PTL_LENGTH','PTL_WIDTH','SPECIES')
names(myDF)
histogram(myDF$PTL_LENGTH)
hist(myDF$PTL_LENGTH)
hist(myDF$PTL_LENGTH,bins = 30)
hist(myDF$PTL_LENGTH,bins = 10)
hist(myDF$PTL_LENGTH,bins = 25)
hist(myDF$PTL_LENGTH,bins = 50)
?bins
?hist
?iris
?hist
hist(myDF$PTL_LENGTH,breaks = 10)
hist(myDF$PTL_LENGTH,breaks = 20)
hist(myDF$PTL_LENGTH)
qqnorm(myDF$PTL_LENGTH)
qqnorm(myDF$PTL_LENGTH,col=myDF$SPECIES)
hist(myDF$PTL_LENGTH,col=myDF$SPECIES)
hist(myDF$PTL_LENGTH)
boxplot(myDF$PTL_LENGTH~myDF$SPECIES, xlab='Species',ylab='Petal Length (in)')
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
cars<-cars
head(cars,10)
cars<-cars
head(cars,10)
cars
cars<-mtcars
head(cars,10)
names(cars)
carsMPG<-cars[,c(1,6)]
head(carsMPG)
plot(carsMPG$mpg~carsMPG$wt)
names(cars)
?mtcars
table(cars$gear,cars$mpg)
table(cars$gear,mean(cars$mpg))
table(mean(cars$gear),mean(cars$mpg))
table(cars$gear,cars$cyl)
#Make linear model with lm() and assign it to an object
mdl<-lm(myDF$SP_LENGTH~myDF$SP_WIDTH)
summary(mdl)
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
abline(mdl)
#Make linear model with lm() and assign it to an object
mdl<-lm(myDF$SP_LENGTH~myDF$SP_WIDTH)
summary(mdl)
plot(myDF$SP_LENGTH~myDF$SP_WIDTH, col = myDF$SPECIES)
abline(mdl)
summary(mdl)
mdl<-lm(carsMPG$mpg~carsMPG$wt)
summary(mdl)
plot(carsMPG$mpg~carsMPG$wt)
abline(mdl)
mdl<-lm(carsMPG$mpg~carsMPG$wt)
summary(mdl)
plot(carsMPG$mpg~carsMPG$wt)
abline(mdl)
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
setwd("C:/R_Projects/LearnR")
#render your sweet site.
rmarkdown::render_site()
